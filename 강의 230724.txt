#1.

보편적으로 많이 쓰는 C 표준은 C99, C11임.

기존의 MISRA 2012는 C99만을 커버하였으나,

얼마전에 MISRA 2023이 나오면서 C11과 C17까지도 커버하는 가이드라인이 나왔다고 함.

시큐어 코딩이란

내부적 동작만이 아닌 잠재적인 취약점이 발생하지 않도록 문제를 회피하여 구현하는 기법을 말함.

릴리즈 이후에 발생할 수 있는 비용을 줄일 수 있다.



C언어에서 시큐어 코딩을 위한 가이드라인이 두 가지 있음.

1. MISRA
2. CERT

MISRA = Motor Industry Software Reliability Association

기존까지 2012를 써왔으나

2023이 나오면서 점진적 적용의 가능성이 있음.

CERT = Computer Emergency Response Team



#2.

C언어의 단점

1. 미정의 동작(Undefined Behavior)
	= C언어 표준에서 정의되어있지 않은 동작을 말함.
	미정의 동작을 수행하는 코드는
	"실행 환경에 따라" 예측할 수 없는 동작을 보여줄 수 있다.
	이것이 C언어의 취약점이 될 수 있다.

2. 미지정 동작 (Unspecified Behavior)
	= C언어 표준에서 동작이 여러가지 가능성 중 하나로 정의되지만
	그 중 어떤 것이 선택될 지 
	가능성이 여러개 있지만 그 중 어느 것을 선택해야할지 표준에서 정의하고 있지 않으며,
	컴파일러와 실행 환경에 따라 다른 결과가 발생할 수 있다.

미정의 동작에 대한 예)
1. 정수를 0으로 나누는 동작 = FPE 발생.
2. 오버플로우 발생 시 = 표준에서 정의하고 있지 않음.
3. 잘못된 메모리 참조.
==============
#include <stdio.h>
#include <limits.h>

int main(void)
{
	// 1. 0으로 나누기
	int n1 = 5;
	int n2 = 0;
	int n = n1 / n2;

	// 2. 오버플로우
	int a = INT_MAX;
	printf("%d", a + 1);

	// 3. 널포인터 역참조
	int *p = NULL:
	*p = 0x1000;
	return 0;
}
==============

미지정 동작의 예)
============
#include <stdio.h>

int g = 0;

int f1(void)
{
	g = 100;
	return 2;
}

int f2(void)
{
	g = 200;
	return 1;
}

int main(void)
{
	printf("%d\n", f1() + f2());
	printf("%d", g);
}
============
f1 안에 g = 100;
f2 안에 g = 200;
전역변수에 의존하는 코드가 있다면

f1() + f2() 같은 이항 연산자 수행 시
f1가 먼저 수행될지 f2가 먼저 수행될지는 "미지정" 동작임.

이런 건 탐지하기도 어려움.

그래서 int r1 = f1();
int r2 = f2();
int res = r1 + r2; 를 함으로써
컴파일러 의존 없이 동일한 그리고 사용자가 의도한 결과를 낼 수 있도록 해야 함.

=============
int n; // uninitialized

switch(n)
{
	case 0 :
	break;
	
	...
	default :
	break;
}
=============
이것도 미지정 동작이라고 함.

gcc 기준 어셈 까보면
=============
main:
		...
        call    f1()
        mov     ebx, eax
        call    f2()
        add     eax, ebx
        ...
=============
f1이 먼저 수행됨.

그리고 함수에 "인자를 전달하는 순서" 도
미지정 동작임.
뒤에거 먼저 전달하는지 앞에거 먼저 전달하는지
컴파일러에 따라 다를 수 있다.


이런 경우 의도하지 않은 문제를 만들 수 있고,
버그 잡기도 어렵기 때문에
주의해야 한다는 내용.

C언어는 언어가 단순하기 때문에
가이드라인을 지키는 게 어렵지 않음.

아래 예제를 보자.
============
#include <stdio.h>

int main(void)
{
	int a = 10;
	// a의 값은 얼마일까요? ??/
	++a;
	printf("%d", a);
	return 0;
}
============
결과가 10이 나올 수도 있다고 함.

두 가지 문제가 있다고 함.

1. 삼중자 (trigraph)
	C언어에는 삼중자라는 기능이 있어서
	??= => #
	??/ => \
	로 변환되는 기능이 있다고 함.
	요즘 컴파일러는 삼중자가 비활성화되어있지만
	옛날 거는 활성화되어있다고 함.
	컴파일할 때 -trigraphs 라는 옵션을 쓰면 활성화시킬 수 있다고 함.
2. 라인주석
	라인주석 끝에 역슬래시가 오면
	그 다음 라인까지도 주석으로 처리된다고 함.
결국 ??/ 문자가 삼중자 기능에 의해 역슬래시로 변환되면서 그 아랫줄 코드를 주석처리하여
++a이 수행되지 않음.

그래서 라인 주석 대신
블록 주석을 써야 한다고 함.
좀 답답하긴 한데, 그렇다고 함.

그럼 삼중자를 빼면 안되나? 하는 표준 위원회에서의 의견이 있었는데
C언어는 사용하고 있는 레거시가 엄청 많은지 IBM 측에서 반대의견이 거세서
제외되었다고 함.
C++은 C++17부터 제외되었다고 함.

#3.

전처리 (Preprocessing)

전처리의 첫 번째 내용

전처리는 "텍스트 치환"이다.

흔히 매크로 상수를 정의하거나
매크로 함수를 정의할 때 쓰인다.
(참고로 매크로 상수와 함수의 이름은 대문자로 작성하는 게 일반적이다.)

다만 매크로 사용 시에는 "텍스트 치환" 이라는 점을 주의해야 한다.

=============
#include <stdio.h>

#define SQUARE(x) x * x

int square(int x)
{
	return x * x;
}

int main(void)
{
	int x = 10;
	printf("%d\n", square(x + x));
	printf("%d\n", SQUARE(x + x));
	return 0;
}
=============

정답은 400이나, 매크로 함수에서 120이 출력됨.
연산자 우선순위에 의해 의도하지 않은 값이 출력됨.
해결 방법은 매크로 함수의 인자에 괄호를 사용하면 된다.

=============
#include <stdio.h>

#define PI 3.14
#define SQUARE(x) (x) * (x)

int square(int x)
{
	return x * x;
}

int main(void)
{
	int x = 10;
	printf("%d\n", square(x + x));
	printf("%d\n", SQUARE(x + x));
	return 0;
}
=============

=============
#include <stdio.h>

#define DBL(x) (x) + (x)

int dbl(int x)
{
	return x + x;
}

int main(void)
{
	int x = 10;
	printf("%d\n", dbl(x + x) * dbl(x + x));
	printf("%d\n", DBL(x + x) * DBL(x + x));
	return 0;
}
===============

1600이 나와야 하나 440이 나옴.

전처리 결과는 아래와 같음.
===============
printf("%d\n", (x + x) + (x + x) * (x + x) + (x + x));
===============

그래서 "전체치환영역"에 대해 다 괄호로 감싸줘야 함.
그래야 일반함수의 결과값과 동일함을 보장할 수 있다.

================
#include <stdio.h>

#define DBL(x) ((x) + (x))

int dbl(int x)
{
	return x + x;
}

int main(void)
{
	int x = 10;
	printf("%d\n", dbl(x + x) * dbl(x + x));
	printf("%d\n", DBL(x + x) * DBL(x + x));
	return 0;
}
==================

그러면 1600이 나온다.

또다른 예제를 보자.

===============
#include <stdio.h>

#define INFO -1
#define WARN 2
#define ERROR 3

void log_print(int level, const char *message)
{
	if (level INFO) // == 빠짐
	{
		printf(message);
	}
}

int main(void)
{
	log_print(WARN, "hello world");
	return 0;
}
===============

위 코드를 컴파일하면 컴파일 에러가 발생하지 않는다.

이는 매크로가 음수이기 때문에 발생하는 경우 중 하나임.

잘 발생하는 오류는 아니지만 이런 것도 있다는 것.

마찬가지로 괄호를 통해 해결할 수도 있다.

또는 매크로 상수보다는 열거형을 이용하여 해결할 수 있다.

==========
#include <stdio.h>

typedef enum
{
	INFO = -1,
	WARN = 2,
	ERROR = 3,
} LOG_LEVEL_T;

void log_print(int level, const char *message)
{
	if (level INFO) // == 빠짐
	{
		printf(message);
	}
}

int main(void)
{
	log_print(WARN, "hello world");
	return 0;
}
=============

그러면 컴파일 에러를 통해 걸러지는 것을 볼 수 있다.

문제는

1.열거형은 "정수" 타입에 대해서만 사용할 수 있다.

2.C언어에서의 열거형은 컴파일 상수가 아니라 런타임 상수여서

상수 표현식에서는 사용할 수 없다.



전처리의 두 번째 내용

괄호를 항상 써야 하는 것은 아니다.

1.

단일 식별자 또는 함수 호출로 확장되는 매크로는

연산자 우선순위의 영향을 받는 형태가 아니기 때문에

괄호를 사용할 필요가 없다.

=================
#include <stdio.h>

int GetPid(void) { return 42; }

#define GET_PID GetPid
#define MY_PID GetPid()

int main(void)
{
	printf("%d\n", GetPid());
	printf("%d\n", GET_PID());
	printf("%d\n", MY_PID);
	return 0;
}
===================

2.

아래처럼 배열 인덱스나([])

구조체 멤버 접근(.),

구조체 포인터 멤버 접근의 경우(->)에도

우선순위의 영향을 받지 않으므로

괄호를 쓰지 않아도 된다.

===============
#include <stdio.h>

#define MAX_SIZE 128
#define FIRST_INDEX 0

#define NEXT_BLOCK block->next
#define CID record.cid

int main(void)
{
	int arr[MAX_SIZE];
	arr[FIRST_INDEX] = 42;
	return 0;
}
===============



전처리의 세 번째 내용

==============
#include <stdio.h>

#define SQUARE(x) ((x) * (x))

int main(void)
{
	int x = 10;
	printf("%d", SQUARE(++x));
	return 0;
}
==============

gcc에서는 144로 출력되나, clang에서는 132로 출력된다.

이 코드는 "미정의 동작"에 해당한다.

한 줄에서 ++같은 연산을 두 번 이상 수행하는 코드는

표준에 정의되어있지 않으며 컴파일러마다 상이할 수 있는 부분이다.

================
#include <stdio.h>

#define ABS(x) ((x) > 0 ? (x) : -(x))

int main(void)
{
	int x = -10;
	printf("%d", ABS(--x));
	return 0;
}
================

이 경우도 마찬가지.

컴파일러마다 값이 동일하게 나올 수도 있지만,

지양해야 한다.

문제를 발견하기도 어렵다.



해결 방법은

1. 증감 연산자를 매크로 함수를 사용하기 전에 써야 한다.

==============
#include <stdio.h>

#define SQUARE(x) ((x) * (x))
#define ABS(x) ((x) > 0 ? (x) : -(x))

int main(void)
{
	int x = 10;
	++x;
	printf("%d\n", SQUARE(x));

	int a = -10;
	--a;
	printf("%d\n", ABS(a));

	return 0;
}
==============

2. 매크로 함수 이름 앞에 UNSAFE_ 를 붙인다.

그를 통해 사용자가 인지하도록 하는 방법이 있다고 한다.

=============
#include <stdio.h>

#define UNSAFE_SQUARE(x) ((x) * (x))
#define UNSAFE_ABS(x) ((x) > 0 ? (x) : -(x))

int main(void)
{
	int x = 10;
	++x;
	printf("%d\n", UNSAFE_SQUARE(x));
	int a = -10;
	--a;
	printf("%d\n", UNSAFE_ABS(a));
	return 0;
}
=============

3. C99에서 추가된 인라인 함수를 사용한다.

인라인은 컴파일 최적화에 의해 동작하는 부분이다.

인라인 함수는 컴파일 최적화 명령이다.

사용자가 inline을 쓴다고 무조건 치환되는 건 아니다.

==========
        call    square(int)
==========

inline은 컴파일러가 판단하는데,

MSVC에서는 옵션에 /Ob1 을 쓰면 강제로 치환시킬 수 있다.


인라인 함수는 반드시 internal linkage를 갖도록 만들어져야 한다.

외부의 어떤 것을 가져오면 안되고, 안에서 자체적으로 해결되어야 한다.

inline 앞에 static을 붙이는 이유는 internal linkage를 갖게 하기 위함인데,

C++에서는 없어도 알아서 되지만 C에서는 붙여줘야 한다고 함.

그리고 인라인 함수는 반드시 헤더를 통해 제공되어야

외부 파일에서 쓸 수 있다고 한다.

다만 일반 함수에 비해 코드 사이즈가 더 커질 수 있다.

다만 인라인 함수가 일정 크기를 넘어가면 컴파일러 차원에서 인라인 치환을 수행하지 않음.


전처리 네 번째 내용

================
#include <stdio.h>

int cnt = 0;

void print_cnt(void)
{
	printf("cnt = %d\n", cnt);
}

#define CALL_FUNC(fp) (++cnt, fp())

int main(void)
{
	CALL_FUNC(print_cnt);
	CALL_FUNC(print_cnt);
	CALL_FUNC(print_cnt);
}
================

위 코드는 정상이지만

main 안에 cnt라는 지역 변수가 추가되면

제대로 된 결과가 출력되지 않는다.

================
#include <stdio.h>

int cnt = 0;

void print_cnt(void)
{
	printf("cnt = %d\n", cnt);
}

#define CALL_FUNC(fp) (++cnt, fp())

int main(void)
{
	int cnt = 10;

	CALL_FUNC(print_cnt);
	CALL_FUNC(print_cnt);
	CALL_FUNC(print_cnt);
	return 0;
}
================

이 경우 매크로 함수를 인라인 함수로 변경하면

전역의 cnt를 그대로 쓸 수 있게 된다.

============
#include <stdio.h>

int cnt = 0;

void print_cnt(void)
{
	printf("cnt = %d\n", cnt);
}

static inline void call_func(void (*fp)(void))
{
	++cnt;
	fp();
}

int main(void)
{
	int cnt = 10;

	call_func(print_cnt);
	call_func(print_cnt);
	call_func(print_cnt);
	return 0;
}
============

나열 연산자
========
#include <stdio.h>

int main(void)
{
	printf("%d\n", (1, 2, 3));
	return 0;
}
========
(1, 2, 3) 형태를 나열 연산자라고 하나보다.

출력 결과가 3이 나온다.



아래 코드에서 문제점을 찾아보자.

==============
#include <stdio.h>

int operations = 0; /* 전체 함수 호출 횟수 */
int calls_to_f = 0; /* F() 함수 호출 횟수 */
int calls_to_g = 0; /* G() 함수 호출 횟수 */

#define F(x) (++operations, ++calls_to_f, 2 * (x))
#define G(x) (++operations, ++calls_to_g, (x) + 1)

int main(void)
{
	int result;
	int x = 10;

	result = F(x) + G(x);

	printf("%d\n", result);
	printf("%d %d %d\n", operations, calls_to_f, calls_to_g);
	return 0;
}
==============

1. 전역변수와 동일한 이름의 지역변수가 선언되면 문제가 생길 수 있다.

2. 증감 연산자 다회 수행에 의한 미지정 동작이 수행된다.

result의 값이 31으로 나오고 있다.

나머지는 값에는 문제는 없지만 동작에 문제의 소지가 있다.

그래서 이를 개선하기 위해서는 매크로 함수를 인라인 함수로 바꾸면 된다.

==========================
#include <stdio.h>

int operations = 0; /* 전체 함수 호출 횟수 */
int calls_to_f = 0; /* F() 함수 호출 횟수 */
int calls_to_g = 0; /* G() 함수 호출 횟수 */

static inline int f(int x)
{
	++operations;
	++calls_to_f;
	return 2 * (x);
}

static inline int g(int x)
{
	++operations;
	++calls_to_g;
	return 2 * (x);
}

//#define F(x) (++operations, ++calls_to_f, 2 * (x))
//#define G(x) (++operations, ++calls_to_g, (x) + 1)

int main(void)
{
	printf("%d\n", (1, 2, 3));

	int result;
	int x = 10;

	//result = F(x) + G(x);
	result = f(x) + g(x);

	printf("%d\n", result);
	printf("%d %d %d\n", operations, calls_to_f, calls_to_g);
	return 0;
}
===============================

이렇게 하면 문제를 해결할 수 있다.

f(x) + g(x) 와 같이 함수를 피연산자로

이항 연산자를 수행할 때의 미지정 동작을

방지하기 위해서

rf = f(x)
rg = g(x)
res = rf + rg

와 같이 분리해서 써야 한다.

추가.

나열 연산자(,)의 수행 순서는 앞에서부터 차례대로지만,

함수 인자 전달의 순서는 미지정임.



결론은

매크로 함수를 함수 호출의 오버헤드를

줄이기 위해 사용하는 경우라면

매크로 함수를 인라인 함수로 대체할 수 있다면

인라인 함수로 쓰는 것이 좋다.

하지만 이것도 예외가 있다.

인라인은 안되는 매크로 함수에서만 사용할 수 있는 기능들이 있음.

# = 토큰을 문자열로 만들어줌.
## = concatenation. 두 개의 토큰을 하나의 토큰으로 바꿔줌.

#A => "A"
A##B => AB

예를 들면

===========================
#include <stdio.h>

typedef enum
{
	Color_Red,
	Color_Blue,
	Color_Green,
} Color;

typedef struct 
{
	Color color;
	const char *name;
} color;

color colors[] = {
	{Color_Red, "Red"},
	{Color_Blue, "Blue"},
	{Color_Green, "Green"},
};

int main(void)
{
	return 0;
}
================================

이 코드를

===============
#include <stdio.h>

typedef enum
{
	Color_Red,
	Color_Blue,
	Color_Green,
} Color;

typedef struct 
{
	Color color;
	const char *name;
} color;

#define COLOR(color)			\
	{							\
		Color_##color, #color	\
	}

color colors[] = {
	COLOR(Red),
	COLOR(Blue),
	COLOR(Green),
};

int main(void)
{
	return 0;
}
===============

이렇게 고칠 수 있다.

COLOR는 매크로 함수지만 인라인으로 대체할 수 없다.

주의할 점은

# 또는 ##은 반드시 이중으로 처리해주어야 한다.

무슨 뜻이냐면

==============
#include <stdio.h>

#define TO_STR(a) #a

#define HELLO hello

int main(void)
{
//	printf("%s\n", TO_STR(hello));
	printf("%s\n", TO_STR(HELLO));
	return 0;
}
==============

결과값은 hello가 아닌 HELLO인데,

의도한 hello가 나오게 하려면

====================
#include <stdio.h>

#define TO_STR_IMPL(a) #a
#define TO_STR(a) TO_STR_IMPL(a)

#define HELLO hello

int main(void)
{
	//printf("%s\n", TO_STR(hello));
	printf("%s\n", TO_STR(HELLO));
	return 0;
}
====================

이렇게 이중으로 만들어주어야 한다.

CONCAT도 마찬가지로

======================
#include <stdio.h>

#define CONCAT(a, b) a##b

#define HELLO hello

int main(void)
{
	int hello10 = 100;
//	printf("%d\n", CONCAT(hello, 10));
	printf("%d\n", CONCAT(HELLO, 10));
	return 0;
}
======================

컴파일 에러가 발생한다.

======================
#include <stdio.h>

#define CONCAT_IMPL(a, b) a##b
#define CONCAT(a, b) CONCAT_IMPL(a, b)

#define HELLO hello

int main(void)
{
	int hello10 = 100;
	printf("%d\n", CONCAT(HELLO, 10));
	return 0;
}
======================

그래서 이렇게 이중으로 해주면 해결된다.



매크로 함수가 유용한 또 한가지 경우는

조건부 컴파일임.

#define TRACE(...)

이렇게 매크로 함수에 ...을 기입하는 방법을

가변인자 매크로(Variadic Macro)라고 함.

C99부터 추가됨.

#define TRACE(...) fprintf(stderr, __VA_ARGS__)

...은 __VA_ARGS__ 라는 약속된 키워드를 통해서

그대로 옮겨넣을 수 있다.

=================
#include <stdio.h>

#ifdef DEBUG_MODE
#define TRACE(...) fprintf(stderr, __VA_ARGS__)
#else
#define TRACE(...)
#endif

int main(void)
{
	TRACE("Hello\n");

	int n = 42;
	double d = 3.14;
	unsigned int x = 0xffff;
	TRACE("%d %lf %x\n", n, d, x);
	return 0;
}
=================

위 코드를 -DDEBUG_MODE 옵션을 넣어서 컴파일하면

실행할 때 프린트가 출력되고, 안넣으면 안출력된다.


근데 이 코드에 문제가 있다.

DEBUG_MODE가 정의되지 않으면

===============
int main(void)
{
	;

	int n = 42;
	double d = 3.14;
	unsigned int x = 0xffff;
	;
	return 0;
}
===============

이런 모양이 된다. 이 경우

TRACE() 뒤에 세미콜론을 빼먹어도

컴파일 오류가 발생하지 않는다.

그래서

#define TRACE(...)

대신

#define TRACE(...) (void)0

이렇게 쓴다고 한다.

(void)0 얘는 컴파일 시 아무 코드도 생성하지 않는다.

이를 통해 세미콜론이 없으면 오류를 내도록 할 수 있다.

또 하나

우리가 void로 casting하는 경우는

어떤게 있지?

===============
int foo(void)
{
	return 0;
}
foo();
===============

라는 코드가 있을 때,

간혹 "함수의 결과를 무시하면 안됩니다" 라고 나오는 경우가 있음.

그 때 이렇게

(void)foo();

이렇게 해서 무시할 수가 있다.

대부분의 컴파일러는 아무말 안하지만

엄격한 정적 분석 툴은 딴지를 걸기 때문에

요런걸 써서 회피할 수 있다.



또 하나

상수 표현식이 필요할 때 매크로 함수가 유용하다.

==============
int main(void)
{
	int n = 10 / 2;
}
==============

이거 어셈 까보면

==============
main:
        push    rbp
        mov     rbp, rsp
        mov     DWORD PTR [rbp-4], 5   <<<
        mov     eax, 0
        pop     rbp
        ret
===============

컴파일 타임에 판단되어 이미 5로 계산되어있다.



상수 표현식이 필요한 경우

1. enum의 초기값
2. 전역변수/static 변수의 초기값
3. 배열의 크기

===================
#define DIV2(x) ((x) / 2)
static inline int div2(int x)
{
	return x / 2;
}

// 1. enum의 초기값
enum
{
	N1 = DIV2(10)
};

// 2. 전역변수 / static 변수의 초기값
int x = DIV2(10);
void foo(void)
{
	static int sx = DIV2(10);
}

// 3. 배열의 크기
int arr[DIV2(10)];
===================

C++은 전역변수 / static 변수의 초기값이

상수 표현식이 아니어도 된다.



예외 4. 매크로 함수에서만 허용되는

문법을 사용할 때.

================
#include <stdio.h>

#define EVAL_BINOP(OP, L, R) ((L)OP(R))

int main(void)
{
	printf("%d\n", EVAL_BINOP(+, 1, 1));
	printf("%d\n", EVAL_BINOP(-, 1, 1));
	printf("%d\n", EVAL_BINOP(*, 1, 1));
}
================

이런 건 인라인 함수로 대체 못함.



매크로 함수의 장점

1. 함수호출 오버헤드가 없다.
2. 타입에 종속적이지 않은 함수를 구현할 수 있다.

예를 들면

===================
#include <stdio.h>

#define ABS(x) ((x) > 0 ? (x) : -(x))

int main(void)
{
	int n = -10;
	printf("%d\n", ABS(n));
	double d = -3.14;
	printf("%lf\n", ABS(n));
	return 0l
}
==================

위 코드의 ABS 함수는 정수든 실수든 사용 가능하다.

근데 C에서 인라인으로 짜면 타입 별로 다 짜야 한다.

C++에는 오버로딩이나 템플릿이 있지만.

근데 ABS를 그냥 쓰면 미지정 동작이 발생하고

인라인으로 쓰자니 타입이 늘어나니까

C11에서는 _Generic이란걸 쓴다고 함.

================
#include <stdio.h>

//#define ABS(x) ((x) > 0 ? (x) : -(x))

static inline int iabs(int x) { return x > 0 ? x : -x; }
static inline double dabs(double x) { return x > 0 ? x : -x; }
static inline long long llabs(long long x) { return x > 0 ? x : -x; }

#define ABS(x) _Generic((x), int: iabs(x), double: dabs(x), long long: llabs(x))

int main(void)
{
	int n = -10;
	printf("%d\n", ABS(n));

	double d = -3.14;
	printf("%lf\n", ABS(d));

	long long ll = -32423232323LL;
	printf("%lld\n", ABS(ll));
	return 0;
}
======================

이러면 동일한 ABS라는 함수 이름으로

여러 타입을 커버할 수 있다.

========================
#include <stdio.h>

#define PrintValue(x) _Generic((x), \
	int: printf("%d\n", x), \
	double: printf("%lf\n", x), \
	long long: printf("%lld\n", x), \
	char*: printf("%s\n", x), \
	default: printf("Unknown type.\n") \
	)

int main(void)
{
	int n = -10;
	PrintValue(n);

	double d = -3.14;
	PrintValue(d);

	long long ll = -32423232323LL;
	PrintValue(ll);
	return 0;
}
=======================

요렇게도 쓸 수 있다고 함.

매크로 정의의 문제점

타입 정의를 매크로로 하면 위험할 수 있음.

==========
#define cstring char*

int main(void)
{
	cstring s = "hello"; // OK
	cstring s1, s2; // ERROR
	return 0;
}
==========

s2는 char*이 아닌 char로 선언됨.

그래서 사용자 타입 정의는 매크로 대신

typedef로 하는 것이 바람직하다.

추가로 변수를 정의할 때는 한 라인에 여러개씩 하지 않는 것이 좋다고 함.



미리 정의된 매크로 (Predefined Macro)

__FILE__ : 소스코드 파일
__LINE__ : 소스코드 라인
__DATE__ : 소스를 컴파일한 날짜
__TIME__ : 소스를 컴파일한 시간
__func__

여기서 __func__는 매크로가 아니다!

현재 함수 이름으로 처리되는 문자열 상수임.

__STDC__ : 컴파일러가 표준을 지원하는지. (1/0)
 - C99부터 지원

__STDC_VERSION__ : 컴파일러가 사용하는 현재 표준 버전



SWAP을 매크로 함수로 구현하면

=============
#define SWAP(a, b) \
	int temp = a;  \
	a = b;         \
	b = temp;
=============

이렇게 되는데,

두 번 쓰면 컴파일 에러 발생함.

왜냐면 동일한 이름의 지역변수를 두 번 선언하기 때문.

그러면 안의 temp 변수로 충돌나지 않도록 하려면?

==================
#define SWAP(a, b)     \
	{                  \
		int temp = a;  \
		a = b;         \
		b = temp;      \
	}
==================

중괄호로 감싸면 되지만

세미콜론을 사용하지 않을 경우 컴파일 오류가 발생한다.

그래서 복수 구문 매크로 함수는 do{} while(0)로 감싸야 한다.

==================
#define SWAP(a, b)     \
	do {               \
		int temp = a;  \
		a = b;         \
		b = temp;      \
	} while(0)
==================

근데 얘도 문제가 있다.

변수 이름이 b가 아니라 temp면

이름 충돌로 인해 의도하지 않게 동작함.

temp를 __temp로 고쳐놓으면 회피는 가능하지만

==================
#define SWAP(a, b)     \
	do {               \
		int __temp = a;  \
		a = b;         \
		b = __temp;      \
	} while(0)
==================

하지만 어떤 인간이 또 __temp 이름을 써버리면

또 충돌나므로, 완벽 보장은 못함.

그래서 절대 충돌나지 않을 만한 이름을 만들 건데,

=======================
#define CONCAT_IMPL a##b
#define CONCAT(a, b) CONCAT_IMPL(a, b)
#define UNIQUE_NAME(a, b) CONCAT(a, b)

#define SWAP(a, b)     \
	do {               \
		int UNIQUE_NAME(__temp, __LINE__) = a;  \
		a = b;         \
		b = UNIQUE_NAME(__temp, __LINE__);      \
	} while(0)
=======================

요런 방법을 이용해서 최대한 충돌나지 않게 바꾸는 것임.

그럼 타입을 int 말고 다른거 쓰려면?

=====================
#define SWAP(type, a, b) \
	do                   \
	{                    \
		type __temp = a; \
		a = b;           \
		b = __temp;      \
	} while (0)
======================

type을 인자로 받을 수 있겠고.

=======================
#define SWAP(a, b) \
	do                   \
	{                    \
		__typeof(a) __temp = a; \
		a = b;           \
		b = __temp;      \
	} while (0)
=======================

요렇게 __typeof를 이용하는 방법도 있다고 함.

a랑 b의 타입이 서로 다를 수도 있겠지만,

현업에서는 그런 경우는 잘 없음.

그리고 do-while(0) 말고도

({...}) 형태의 문법을 쓸 수도 있다고 함.

(MSVC에서는 사용 불가.)

=============
#define SWAP(a, b)              \
	({                           \
		__typeof(a) __temp = a; \
		a = b;                  \
		b = __temp;             \
	})
=============

__typeof는 GNU Extension이고

C언어 표준은 아님.

C++11에서는 decltype과 동일함.



마지막으로,

아래는 미정의 동작이다.

=============
#include <stdio.h>

#define MORE_ARGS 1

int foo
#if (MORE_ARGS == 1)
	(int a, int b, int c, int d)
#else
	(int a, int b, int c)
#endif
{
#if (MORE_ARGS == 1)
	return a + b + c + d;
#else
	return a + b + c;
#endif
}

#if (MORE_ARGS == 1)
#define CALL_FOO(a, b, c, d) foo(a, b, c, d)
#else
#define CALL_FOO(a, b, c) foo(a, b, c)
#endif


int main(void)
{
	int result = CALL_FOO(10, 20,
#if (MORE_ARGS == 1)
		30,
#endif
		40);
	printf("%d", result);
	return 0;
}
===================


main 안의 조건부 컴파일이 문제인데,

매크로 함수의 인자 목록에

전처리기 지시어를 사용하는 것은

미정의 동작이다.

일반 함수는 상관없음.

문제는 C의 표준 함수 중 어떤 함수들은 매크로 함수로 정의되어 있음.

예) memcpy, printf, assert 등

바람직하게 바꾸려면

==================
	int result =
#if (MORE_ARGS == 1)
		CALL_FOO(10, 20, 30, 40);
#else
		CALL_FOO(10, 20, 40);
#endif
==================