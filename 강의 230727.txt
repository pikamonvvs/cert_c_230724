어제 배운거 복습

구조체 포인터 타입을 typedef로 정의할 경우

const 키워드의 적용 범위가 의도와 달라진다.

구조체 포인터 타입은 aliasing을 하지 말거나

읽기 전용 포인터의 typedef도 같이 정의하거나.


헤더에 struct를 정의할 경우

사용자가 구조체 멤버를 직접 접근하는 게 가능해짐

정보은닉 개념이 C언어 안에서 필요하다면

불투명한 타입으로 만들어줄 수 있었다.

구조체가 불투명한 타입이라면

STACK s; 이렇게 바로 생성해줄 수도 없다. 어떤 레이아웃을 가지는지 모르기 때문.

보안은 불편함이 따른다.

그래서 STACK s = create_stack(10); 처럼

변수를 만들어 반환해주는 함수를 같이 제공해주어야 한다.


static은 다른 파일에서 접근하지 못하도록 사용했다.

C언어는 이름 충돌을 해결해주지 않고 있어서

사용자가 잘 제어해야 한다.


외부 파일의 전역 변수 선언은

extern을 이용하여 끌어와야 한다.

========================
int n = 10;

-----------------------

#include <stdio.h>

extern long n;

int main(void)
{
    printf("%ld\n", ++n);
    return 0;
}
========================

외부 파일의 int n = 10; 을

extern long n; 으로 끌어오면

컴파일 오류가 날까 링크 오류가 날까 문제가 없을까?

C/C++은 항상 "컴파일의 번역 단위는 파일"이다.

외부파일 따로 현재파일 따로 컴파일을 함.

각각에 존재하는 n에 대한 정보를 모르기 때문에

컴파일은 제대로 된다.

그럼 링크 오류일까?

두 변수의 타입이 다르기 때문에

"타입"은 컴파일 단계에서 필요한 정보고 링크에서는 보지 않기 때문에

링크 오류도 안생긴다.

int는 4바이트, long은 gcc/clang에서는 8바이트이기 때문에

printf("%ld", ++n);

를 하면 할당되지 않은 영역도 수정해버리기 때문에 미정의 동작이다.


타입이 같은 정수 타입이거나 호환되는 타입이라면

컴파일 링크 타임에서 이를 잡아주지 못하며,

이런 실수가 이전에 꽤 많이 있었다고 함.

그래서 주의해서 써야 한다.


동일한 주소공간의 메모리 복사를 해야 한다면 memcpy 대신 memmove를 써야 한다.

성능은 memcpy가 더 빠르겠지만 memcpy는 restrict 제한자 때문에

메모리 영역에 변화가 일어나지 않았다고 가정하기 때문에

"컴파일러 옵션에 최적화가 걸려있으면!!" 결과값이 잘못 나온다.

평소에는 안나온다.

=================
#include <stdio.h>
#include <string.h>

int main(void)
{
    int data[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    memcpy(data + 1, data, sizeof(int) * 9);
    for (int i = 0; i < 10; i++)
    {
        printf("%d\n", data[i]);
    }
    return 0;
}
=================

일반 결과값 1 1 2 3 4 5 6 7 8 9

-O2 걸면 1 1 2 3 4 4 6 7 8 8


스마트 포인터 (C++)

unique_ptr이라고 있음. 얘는 누군가는 가리킬 때

소유권에 대한 독점을 보장해줌. "나만 가리킬 수 있다."

================
#include <memory>

class Resource {};

int main(void)
{
    std::unique_ptr<Resource> p1(new Resource);

    //std::unique_ptr<Resource> p2 = p1; // 복사 금지
    std::unique_ptr<Resource> p2 = std::move(p1);

    return 0;
}
================

다른 unique_ptr이 해당 변수를 가리키려고 하면 컴파일 에러가 발생함.

std::move를 통해서 소유권을 옮길 수 있다고 한다.

p1을 p2로 옮기고 나면

p2가 new Resource를 가리키고, p1은 아무것도 안가리킨다고 한다.



포인터를 반환하는 함수들은 어?

그 메모리는 어디서 난 거지? 이렇게 의심해볼 수 있다.



volatile 제한자는 하드웨어 인터럽트나 다른 컨텍스트에서 변경된 변수에



register 키워드는 더 이상 사용되지 않는다.

특정 변수를 레지스터로 올리라는 키워드인데

90년대에는 컴파일러에게 좀 더 상세한 최적화를 위해 사용자가 지정해주는 용도임.

이제는 더 이상 쓰이지 않음.

near pointer, far pointer도 더 이상 쓰지 않음. (Turbo C 시절에 있었던...)

16비트 시스템을 쓰던 시절에 있던 건데

메모리에 한계가 있으니까

segment와 offset으로 접근하게 할 용도였다고 함.


전자과 하드웨어 관심 교육 아버지

거기서 Turbo C 16비트를 배움

이미 32비트 시대였는데.


C언어가 컴파일 언어임에도 타입에 대해 암묵적으로 처리하는 게 많다.

그래서 정확하게 써줘야 한다.


초기화하지 않은 변수를 쓰는 것도 미정의 동작이다.


clang은 그나마 최신 컴파일러이고

내부 정적 분석이 잘 동작해서

warning 메시지가 많이 나온다고 함.


vi 엄청 좋아하고 잘 쓰는게 중요하다 생각했는데

요즘은 vscode 쓴다고 하심. vi까진 잘 적응했는데

emacs는 vi보다 3배 괴랄함. 잘쓰면 초간지지만 포기.

유명한 해커들이 emacs 쓴다고. 있어보이는 건 중요하니까.

vi의 장점? 인체공학적? 직관적이지 않은데?

접근성은 좋지만 이젠 vi, emacs를 몰라도 되는 세상이다.

우리가 쓰는 vi는 vim이고 전통 vi는 방향키도 안먹고 스트레스 많이 받음.

vscode는 Copilot이라고 코드 자동 생성 툴이 있다고?

신입사원이랑 짝프로그래밍하는 느낌이라고

chatGPT도 대체 못할 일을 해야겠다 몸쓰는 일...

하드웨어 개발자 친구랑 농담식으로 짜치는 일 할 때 그건 chatGPT도 못 할 일이라고

말하고 넘긴다는데 심란하다고.

디아블로 머신.

대체될까봐 우울.



#pragma pack(1)
#pragma pack(push, 1)
#pragma pack(pop)
typedef struct
{
    // ...
} __atribute__((packed, aligned(2)));



아래 코드를 보자.

===============
#include <stdio.h>
#include <string.h>

struct s
{
    char c;
    int i;
    char buffer[13];
};

int compare(const struct s* left, const struct s* right)
{
    int result = 0;
    if (left != NULL && right != NULL)
    {
        result = memcmp(left, right, sizeof(struct s)) == 0;
    }
    return result;
}

int main(void)
{
    struct s s1 = { .c = 'A', .i = 42 };
    struct s s2;

    s2.c = 'A';
    s2.i = 42;
    memset(s2.buffer, 0, sizeof(s2.buffer));

    int equal = compare(&s1, &s2);
    printf("equal: %d\n", equal);

    return 0;
}
===============

구조체 초기화할 때

    struct s s1 = { .c = 'A', .i = 42 };

이렇게 초기화하면 패딩도 0으로 초기화되지만

struct s s2; 이렇게 하면 패딩의 값을 알 수 없다,

그리고 compare 함수를 보면

패딩의 값도 같이 비교하고 있다.

그래서 출력값이 0으로 나온다.

그래서 패딩에 관계 없이 멤버를 기반으로 비교를 수행해야 한다.

===============
int compare(const struct s* left, const struct s* right)
{
    int result = 0;
    if (left != NULL && right != NULL)
    {
        result = (left->c == right->c) && (left->i == right->i) && \
                (memcmp(left->buffer, right->buffer, sizeof(left->buffer)) == 0);
    }
    return result;
}
===============

이렇게 바꾸면 1이 나온다.



아래의 연결 리스트 코드를 보자.

==============
#include <stdio.h>

struct list_head
{
    struct list_head* next;
};

struct user
{
    char name[32];
    int age;
    struct list_head link;
};

void insert(struct list_head* head, struct list_head* new)
{
    new->next = head->next;
    head->next = new;
}

int main(void)
{
    struct user user1 = { .name = "Tom", .age = 42 };
    struct user user2 = { .name = "Bob", .age = 30 };
    struct user user3 = { .name = "Alice", .age = 24 };

    struct list_head head = { .next = NULL };
    insert(&head, &user1.link);
    insert(&head, &user2.link);
    insert(&head, &user3.link);
    
    struct list_head* current = head.next;
    while (current)
    {
        printf("XXX\n");
        current = current->next;
    }

    return 0;
}
==============

노드들이 서로 연결된 구조를 파악해보면

current가 user1.link를 가리키고

user1.link가 user2.link를 가리키고

user2.link가 user3.link를 가리키는 형태이다.

노드의 시작주소가 아닌 노드의 멤버를 가리킴.

그럼 노드의 다른 멤버에는 어떻게 접근하냐?

(이거 옛날에 들었던 Generic Linked List인 것 같음.)


구조체 멤버의 오프셋을 구하는 방법

(*(struct user*)0).link

0을 struct user*로 캐스팅을 하고

*로 포인터가 아닌 구조체로 바꾼 다음

.link 에 의해 link 멤버가 저장되는 오프셋을 구하면

0 + 오프셋 이니까 오프셋이 구해짐.

근데 *에 의해 참조가 일어나면 안되니까 

앞에 &를 붙여서 상쇄시켜주고.

그걸 (unsigned long)으로 캐스팅해서 값을 찍어보면

오프셋 값이 출력되는 것을 볼 수 있다.


즉 컴파일러가 이걸 어떻게 해석하냐면

"link의 위치"를 참조하는 연산으로 변환된다!!!


최종적으로는

(unsigned long)&(*(struct user*)0).link

라고 쓴다.

혹은

(unsigned long)&((struct user*)0)->link

도 동일하다.

위 형태의 매크로가 stddef.h 헤더에서 표준으로 제공되고 있다.

offsetof 라는 이름으로 제공된다.

정의는 아래와 같다.

#define xoffsetof(s, m) ((unsigned long)&((s*)0)->m)
#define offsetof(s, m) ((size_t)&((s*)0)->m)

====================
#include <stdio.h>
#include <stddef.h>

struct list_head
{
    struct list_head* next;
};

struct user
{
    char name[32];
    int age;
    struct list_head link;
};

#define xoffsetof(s, m) ((unsigned long)&((s*)0)->m)

int main(void)
{
    struct user user1 = { .name = "Tom", .age = 42 };
    printf("%d\n", offsetof(struct user, link));
    printf("%d\n", xoffsetof(struct user, link));

    return 0;
}
====================

출력하면 둘 다 40이 나온다.


그럼 멤버의 오프셋을 이용해 노드의 시작주소에 접근하려면 어떻게 하면 될까?

current의 값은 현재 노드에서의 link 멤버의 위치니까

current의 주소값에서 link 멤버의 오프셋을 빼주면

현재 노드의 시작 주소를 알 수 있다!

============
#include <stddef.h>

    while (current)
    {
        struct user* p = (struct user*)((char*)current - offsetof(struct user, link));
        printf("%s(%d) -> ", p->name, p->age);
        current = current->next;
    }
    printf("<null>\n");
============

이렇게 노드 시작 주소를 구해서

멤버 참조 연산자로 name과 age에 접근할 수 있다!

참고로 char*로 치환하는 이유는 current가 포인터기 때문이다.

포인터는 산술 연산을 수행하면 1바이트 단위가 아닌 x86은 4바이트, x64는 8바이트 단위로 연산하기 때문에

(오프셋이 40이면 40 * 8이 빼지는 셈.)

이를 1바이트 단위로 연산시키기 위해 사용한다.



이렇게 하면 struct user 뿐만 아니라 구조체가 어떤 건지에 대해 상관 없이

모든 구조체의 모든 위치에 접근할 수 있게 된다.

========
        struct user* p = (struct user*)((char*)current - offsetof(struct user, link));
========

요것도 쓰다가 실수할 수 있으니 container_of 하는 이름으로 정의해서 써보자.

===============
#include <stddef.h>

#define container_of(ptr, s, m) \
    (s*)((char*)ptr - offsetof(s, m))

    while (current)
    {
        struct user* p = container_of(current, struct user, link);
        printf("%s(%d) -> ", p->name, p->age);
        current = current->next;
    }
    printf("<null>\n");
===============

그러면 정상 출력되는 것을 볼 수 있다.


C언어 오픈소스들에서 사용하는 연결리스트, 이진트리 등을 이렇게 구현하고 있다고 한다.



질문, MISRA에서 함수 중간에 변수를 선언하는게 되나?

다행히 된다고 한다. 하도 안된다는 게 많아서 안될 줄 알았는데 된다고 함.



비트 필드 구조체

구조체의 저장 효율을 향상시킬 수 있다.

====================
#include <stdio.h>

struct s
{
    unsigned int m1 : 8;
    unsigned int m2 : 8;
    unsigned int m3 : 8;
    unsigned int m4 : 8;
};

int main(void)
{
    printf("%zu\n", sizeof(struct s));

    struct s data = { 0, };
    unsigned char* ptr = (unsigned char*)&data;

    ++(*ptr);
    printf("%d\n", data.m1);

    return 0;
}
====================

구조체 크기는 4, 

문제는 구조체 내부에 m1, 2, 3, 4가 어떤 순서로 배치될지는

미지정 동작임.


엔디안이랑은 다름.

엔디안은 워드를 저장할 때 (2바이트, 4바이트)

엔디안의 영향을 받도록 내부적으로 구현되어있긴 함.

하지만 엔디안의 개념은 아님.


엔디안은

====================
int n = 0x12345678;
unsigned char* p = (unsigned char*)&n;
printf("%x %x %x %x\n", p[0], p[1], p[2], p[3]);
====================

위 코드를 리틀 엔디안은 78 56 34 12

빅 엔디안은 12 34 56 78.

임베디드 시스템은 거진 리틀 엔디안임.


일반적인 구조체 멤버는 순서가 순차적으로 보장되지만

비트 필드 구조체 멤버들은 보장되지 않고 미지정 동작이기 때문에

++(*ptr); 대신 (data.m1)++; 를 쓰는게 맞다.

우연히 ptr이 data.m1이라서 출력값에는 문제가 없어보일 수 있지만

(data.m1)++을 쓰는 게 맞다.



아래 코드를 보자.

================#include <stdio.h>

struct s
{
    unsigned int m1 : 6;
    unsigned int m2 : 4;
};

int main(void)
{
    struct s data;

    data.m1 = 0;
    data.m2 = 0;

    unsigned char* ptr = (unsigned char*)&data;

    ++ptr;
    *ptr += 1;

    printf("%d %d\n", data.m1, data.m2);

    return 0;
}
================

결과값은 뭘까?

구조체 멤버의 실제 배치가 어떻게 될까?

1번 1 1 1 1 1 1 x x | 2 2 2 2 x x x x

2번 1 1 1 1 1 1 2 2 | 2 2 x x x x x x

왠지 패딩을 만들지 않을까? 해서 1번처럼 보일 수도 있지만

막상 실행해보면 0 4 가 출력된다.

이 경우는 2번의 앞 바이트 LSB가 1로 설정되면서

m2가 0100이 되어 4로 출력되는 경우이다.


사실은 컴파일러 구현에 의존한 부분임.

비트 필드는 패딩이 존재할 수도 있고 안할 수도 있다.


패딩의 존재에 대해 짐작할 수도 없고 고민할 필요도 없다.



실제 리눅스 커널에서 있었던 일임.

커널에서 copy_to_user를 통해 커널 메모리를 유저 메모리로 복사를 하는데,

이 함수가 패딩까지 복사하다보니

커널영역의 스택 정보가 패딩을 통해 유저 공간으로 유출되는 문제가 있었다.

그럼 memset으로 0으로 초기화하면 되지 않았나?

memset 코드가 특정 컴파일러에서는 제대로 수행하지 않는 문제가 있었었다고.

그래서 구조체를 보내고 받을 때는 패킹을 했다가 푸는 방식을 썼어야 했다고 함.

그런 일도 있었다.



비트 필드 구조체는 분명

unsigned char flag : 1;

메모리 이점도 있고

시프트 연산자 대신 멤버 참조 연산자를 이용하면 되고,

오픈소스 안에서도 프로토콜이나 TCP/IP 코드들도 다 비트 필드 구조체로 구현되어있다.

그래서 패딩 때문에 무조건 패킹을 한다거나 하는 것은 조금 맞지 않다.



아래 코드는 OpenBSD에서 실제 있었던 버그이다.

========================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

struct big
{
    unsigned long long ull_1;
    unsigned long long ull_2;
    unsigned long long ull_3;
    int si_4;
    int si_5;
};

int f(void)
{
    size_t skip = offsetof(struct big, ull_2);
    struct big* s = (struct big*)malloc(sizeof(struct big));
    if (!s)
    {
        return -1;
    }

    memset(s + skip, 0, sizeof(struct big) - skip);
    /**/
    free(s);
    s = NULL;

    return 0;
}

int main(void)
{
    return 0;
}
========================

위 코드의 문제점은?

memset에서 s + skip 부분이 잘못됨.

s는 포인터기 때문에 위에 설명한 포인터 산술 연산 때문에 

(char*)로 캐스팅해줘야 한다.


1997년에 반영된 코드인데 아무도 모르다가

2007년에 발견했다고 한다. 엽기..


C언어는 미정의 미지정 동작들 때문에 문제있는 코드가 수면 위로 잘 드러나지 않는 경우가 많다.


어떤 사람 휴대폰에서만 에러

보통은 동일 기종이면 재현이 되는데, 재현도 안되고,

4년 전에 그 사람 집으로 찾아가서 노트북 들고 디버깅한 경험이 있다고...

버그 때문에 이슈가 발견한 걸 알고 허탈했다고..

다시 빌드해서 올려드렸다고.

국가 설정? 

바닥에 앉아서 노트북 펴놓고 디버깅하고 있으니까

사과를 깎아주신 적이 있다고..

어떤건 갤럭시 S9 이었는데, 개발한 앱 서비스의 핵심적인 기능이 동작을 안함.

100만원짜리 버그라고 불렀다고...



표현식 10번째

================
#include <stdio.h>

int main(void)
{
    int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int* p1 = arr;

    printf("%d\n", *p1);
    printf("%d\n", *(p1 + 1));
    return 0;
}
================

대개는 배열 참조 연산인 []를 사용하지만

p1 + 1 처럼 포인터 + 정수 도 당연히 허용되는 연산이다.

arr[N] = *(arr + N).

Decay를 떠올려보자.

arr = &arr[0] = &*(arr + 0) = arr + 0 = arr.

실제로 아래 코드 어셈을 까봤는데

*&*&*&*&*&*&*&*&*&*p1 = 1;

아래처럼

        mov     rax, QWORD PTR [rbp-8]
        mov     DWORD PTR [rax], 1

딱 두 줄 나옴.

이는 *p1 = 1; 의 어셈과 동일함.

즉 컴파일 타임에 상쇄해버리나봄.



또 예제를 보자.

================
#include <stdio.h>

int main(void)
{
    int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    int* p1 = arr;
    int* p2 = arr + 9;
    int* p3 = arr + 10;

    int* p4 = arr + 11;

    return 0;
}
================

p1, p2는 유효하지만 p3는 미정의 아니냐??

라고 할 수 있지만

놀랍게도 배열의 끝을 넘은 다음 요소를 주소로 가르키는 것은 허용된다.

표준에서 정의하고 있는 개념이라고 함.

이를 past the end 라고 부름.

그럼 p4는??

미정의 동작임.


실제로 C++에서 past the end를 이용한다고 함.

C에서는 시작 위치와 개수를 이용한다면

=====================================
void print_array(int* arr, int n)
{
    for (int i = 0; i < n; i++)
    {
        ...
    }
}
=====================================

이렇게 구현한다면

C++에서는 "반개 구간"이라고 해서 [begin, end) 개념을 쓴다고 한다. 시작과 끝을 이용한다고 한다.

=====================================
void print_array2(int* begin, int* end)
{
    int* p = begin;
    while (p != end)
    {
        ...
        ++p;
    }
}
=====================================

호출할 때는

=====================================
print_array(arr, 10);
print_array2(arr, arr + 10);
=====================================

이렇게 쓴다.

근데 p3 past the end의 경우

주소를 참조하는 것은 허용되지만

읽기/쓰기 동작은 미정의 동작이다.

예를 들면 *p3 = 100; 이러면 미정의 동작임.



C++에서는 알고리즘의 일반화 혹은 일반적 프로그래밍(Generic Programming)을 위해서

이렇게 한다고 함.



질문. while (p < end) 가 아니고 while (p != end) 인 이유는

실제 C++에서 !=로 구현되어있기 때문.


C++에서는 선형 자료구조가 배열만 있는 것이 아니라

다양한 선형 자료구조를 제공하는데

이것을 STL, Container하고 한다.

예를 들어 노드들이 연결된 선형 자료구조는

배열처럼 원소가 연속적이지 않다.

======================
#include <iostream>

#include <vector>
#include <list>

template <typename T>
void print_array(T begin, T end)
{
    auto p = begin;
    while (p != end)
    {
        std::cout << *p << std::endl;
        ++p;
    }
}

int main(void)
{
    std::vector<int> arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    print_array(std::begin(arr), std::end(arr));

    return 0;
}
======================



나중에 CERT-C++ 같은 것도 해보고 싶은데,

MISRA C++이랑 AUTOSAR C++이랑 통합을 하겠다고?

MISRA가 악명이 높음. 쓸 수 있는 것도 없고.

그런 걸 좀 모던하게 보완해서 내놓겠다고 했는데

그걸 기다리고 있다고 하심.



우리 수업의 마지막 내용은 type임.

type 시스템 관련해서

연산할 때 어떤 것들을 고려해야 하는가 이런 것들.



포인터 + N, 포인터 - N에 대해 알아보자.

==============
#include <stdio.h>

int main(void)
{
    int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int* p = arr + 5;

    printf("%d\n", *(p - 1));
    printf("%d\n", p[-1]);
    return 0;
}
==============

*(p - 1)은 괜찮지만

p[-1] 은 미정의 동작이다.



포인터 + 포인터 연산은 허용되지 않는 연산이다.

반면에 포인터 - 포인터 연산은 허용되는 연산이다.

단 동일한 배열을 참조하는 포인터에 대해서만 사용해야 한다.

포인터간에 상대적 위치를 파악하는 목적으로 사용할 수 있다.

(포인터1 - 포인터2) / sizeof(대상체 타입)

머 이런식으로 상대적 위치를 파악하는 데에 쓸 수 있다.

================
#include <stdio.h>

int main(void)
{
    int arr[5] = { 1, 2, 3, 4, 5 };
    int* p1 = arr;
    int* p2 = arr + 2;

    printf("%ld\n", p1 - p2); // 같은 배열을 참조하므로 허용됨
    printf("%ld\n", p2 - p1); // 같은 배열을 참조하므로 허용됨

    int x[3] = { 1, 2, 3 };
    p2 = x;

    printf("%ld\n", p1 - p2); // 다른 배열을 참조하므로 허용되지 않음
    printf("%ld\n", p2 - p1); // 다른 배열을 참조하므로 허용되지 않음

    return 0;
}
================



그리고 포인터 간의 관계 연산자(>, <, >=, <=)는

동일한 대상체를 가리키는 경우에만 사용해야 한다.

===============
#include <stdio.h>

struct point
{
    int x, y;
};

int main(void)
{
    int a1[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    int* p1 = a1 + 3;
    int* p2 = a1 + 5;
    if (p1 < p2)
    {

    }

    struct point pt = { 10, 20 };

    int* p3 = &pt.x;
    int* p4 = &pt.y;
    if (p3 > p4)
    {

    }

    return 0;
}
===============

포인터의 타입은 포인터의 산술연산에서의 오프셋을 결정한다.



void 포인터

얘는 가리키는 대상체의 타입 정보가 존재하지 않는다.

C언어에서 모든 타입의 주소를 담을 수 있다.

==========
#include <stdio.h>

int main(void)
{
    int n = 42;
    double d = 3.14;

    void* p1 = &n;
    void* p2 = &d;

    return 0;
}
==========

다만 참조를 비롯한 연산을 수행할 수 없다.

==========
#include <stdio.h>

int main(void)
{
    void* p = NULL;
    printf("%ld\n", (long)(p + 1));

    return 0;
}
==========

위 코드를 실행했을 때

gcc에서는 어째저째 실행이 되지만

msvc에서 컴파일하면 void*는 알 수 없는 크기라고 에러가 뜬다.

p를 char*로 캐스팅 후 실행하면 1이 출력된다.

gcc에서 -pedantic 옵션을 사용하면

표준적인 연산이 아닌 경우 경고를 확인할 수 있다.

void* 참조 연산은 GNU Extension이며 표준이 아니다.



포인터 연산 시 주의해야 할 점이 또 뭐가 있냐면

C 컴파일러는 포인터 연산 시 배열(대상체)의 경계를 초과했는지 컴파일 타임에 검사하지 않는다.

C 컴파일러는 포인터 연산이 유효한 메모리를 참조하는지 컴파일 타임에 검사하지 않는다.

C 컴파일러는 배열의 첨자 연산이 실행 시간에 경계를 초과했는지 검사하지 않는다.

무슨 말이냐면 포인터 연산에 대한 모든 책임은 사용자에게 있다는 뜻임.

잘못 사용하면 미정의 동작의 위험성이 있다.



--------------------
졸았음
--------------------



f1() + f2();
f1() - f2();
f1() * f2();
f1() / f2();
f1() % f2();

산술 연산자에서는 f1와 f2 수행의 순서가 보장되지 않는 미지정 동작이지만

f1() && f2();
f1() || f2();

조건 연산자는 f1이 먼저 수행됨이 보장된다.

f1(), f2();

나열 연산자는 사용하지 않는 것이 좋지만

표준적으로 f1이 먼저 수행됨은 보장된다.

f1() ? f2() : 0;

이것도 f1부터 수행되긴 함.

근데 바람직하진 않다고 함.



질문, unit test에 대한 의견

coverage를 몇프로 만족시켜야 하냐의 기준은 아직도 논쟁이 많음.

TC는 많아질수록 노력대비 효과를 얻을 수 없게 된다.

100% 90% 라는 기준을 갖고 하려고 하니까 노력이 많이 들어간다.

LG에서 google test 강의를 하고 계시다고 함.

개발자가 이런 것도 해야 하니 힘들다고 함.



표현식 14번째

================
#include <stdio.h>

struct X
{
    char a[8];
    int n;
};

struct X foo(void)
{
    struct X result = { .a = "Hello", .n = 42 };
    return result;
}

int main(void)
{
    printf("%d\n", foo().n);
    foo().n = 100;
    foo().a[0] = 'X';
    return 0;
}
================

foo().n가 유효한가?

컴파일도 되고 실행도 잘 되는데

표준에서는 어떨까?

C99 이전에서는

함수의 결과로 반환되는 구조체를 바로 접근하는 행위는 미정의 동작이다.

읽기도 안되고 쓰기도 안된다.

하지만 C99에서는 허용된다.

foo().n = 100;은 컴파일 오류가 난다.

foo().a[0] = 'X'; 는 컴파일 오류가 안나는데,

함수로 반환되는 구조체의 결과(배열)의 값을 바로 수정하면

미정의 동작이다. C99든 C11이든.

읽기는 가능하지만 쓰기는 안된다. 근데 어쨌든 미정의 동작이다.


foo().a[0] = 'X'; 의 의미는

끝났을 때 사라지는 메모리에 접근해서 값을 수정하고 있으니

당연히 미정의 동작이다.


해결방법

1. 함수의 결과를 변수에 복사해서 사용해야 한다.

2. 구조체를 값으로 반환하는 것은 복사의 오버헤드가 있다고 배웠으니

함수를 out parameter 형태로 만든다.

==================================
void goo(struct X* result)
{
    int data[6] = { 1, 2, 3, 4, 5, 6 };
    memcpy(result->a, data, sizeof(result->a));
}

struct X result = foo();

goo(&result);

++(result.a[0]);
===================================

복사의 오버헤드는 primitive 타입이 아니라 사용자 정의 타입에 대해서만

일어난다.

primitive 타입은 기본 타입을 말함.



표현식 15번째

제어문 (if, switch, while, for, do-while)

1. if, for, while은 문장이 하나만 존재하더라도

반드시 중괄호를 써야 한다.

매달리는 else의 문제를 방지하기 위해서.

===========================
if (is_user_login())
    if (is_guest())
        level = GUEST;
else
    level = ADMIN;
===========================

이러면 else가 엉뚱한 데에 걸린다.

2. 그럼 아래 코드는 어디에 문제가 있을까?

============================
int level = ADMIN;
if (is_user_login()) {
    level = USER;
} else if (is_guest()) {
    level = GUEST;
}
============================

else의 경우 level을 ADMIN으로 쓰려는 의도였겠지만,

반드시 else를 써줘야 한다.

즉 모든 control path에 대한 처리가 있어야 한다.

아래처럼 else에서 하는 일이 없어도

============================
int level = ADMIN;
if (is_user_login()) {
    level = USER;
} else if (is_guest()) {
    level = GUEST;
} else {
    ;
    /* Nothing */
}
============================

세미콜론을 넣어서 의도되었다는 것을 알려주면 된다.

필수는 아니고 선택 사항임.

혹은 주석으로 nothing을 적어줘도 된다.


근데 단일 if에서는 else가 강제되지 않는다.

if (is_user_login()) {
    // ...
}



switch문은 반드시 break를 작성해야 한다.

=============
switch (level) {
    case GUEST:
        printf("guest\n");
    case USER:
        printf("user\n");
        break;
    case ADMIN:
        break;
}
=============

이렇게 쓰면 안되겠지?

=============
switch (level) {
    case GUEST:
    case USER:
        printf("user\n");
        break;
    case ADMIN:
        break;
}
=============

이건 허용됨.

그리고 반드시 default를 써야 한다.

default의 위치는 맨 위에 둬도 되고 맨 아래에 둬도 된다.

다만 중간에 넣는 것은 허용하지 않는다.

===========
switch (level) {
    default: // 허용
        break;
    case GUEST:
    case USER:
        printf("user\n");
        break;
    case ADMIN:
        break;
}
===========



표현식 16번째

goto문.

goto 문법은 제한없이 쓰면 코드를 이해하기 어렵게 만든다.

예외적인 상황을 제외하고는 goto의 사용을 제한해야 한다.

goto 문은 반드시 goto 이후에 선언된 같은 함수의 라벨에 대해서만 점프를 수행해야 한다.

밑으로 내려가는 goto는 허용되지만

위로 다시 올라가는 goto는 허용되지 않는다는 뜻.


goto가 유용한 상황 두 가지.

1. 중첩된 반복문을 탈출할 때 유용하다.

for (...) {
    for (...) {
        if (...) {
            break;
        }
    }
}

break는 반복문을 하나만 빠져나올 수 있어서

여러 개를 빠져나오려면 추가적인 코드가 필요하다.

flag를 올렸다가 체크를 했다가...

근데 goto를 쓰면 중첩이 몇 개든 한 번에 빠져나올 수 있다.

반복문이 1개면? goto을 쓰는건 말도 안됨.



MISRA에서는 하나의 반복문 한에서 2대 이상의 break / goto를 사용하면 안되는

규칙이 있다고 함.

왜냐면 반복문에서 종료 횟수를 제한하는 것은

시각적인 코드의 복잡성을 최소화하는 데 도움이 된다.

continue는 괜찮은가봄.

continue로 시비거는 건 아직 못봤다고 하심.

for
    for
        if
            break
    if
        break

요거는 괜찮음.



함수는 단일 종료 지점으로 만들어야 한다...

이게 진짜 어렵다고 함.

종료 지점이 여러 개 있으면 실행 결과를 예측하기 어렵고

결과가 처리되지 않는 문제도 발생할 수 있다고 한다.

머 이렇게 새는 형태로 만들어질 수도 있다는 것 같음.

================
#include <stdio.h>

int foo(void)
{
    
}

int main(void)
{
    int result = foo();
    printf("result: %d\n", result);
    return 0;
}
================

이 단일 종료 지점이 MISRA에서 가장 논쟁이 많은 점 중 하나임.



2. goto 에러 핸들링

실패 가능성이 있는 함수는 반드시 반환값을 통해 오류를 처리해야 한다.

int copy_file(...)
{
    int error = 0;
    srcFd = fopen(src, "r");
    if (srcFd == NULL)
    {
         error = 1;
         goto err1;
    }
    destFd = fopen(src, "r");
    if (destFd == NULL)
    {
         error = 1;
         goto err2;
    }

err2:
    fclose(destFd);
err1:
    fclose(srcFd);
    return error;
}

만약 단일 종료 지점을 써야 하는데 goto를 못쓰게 하면 어케 해야 함?

중간에 return으로 빠져나오는 걸 early exit라고 하나봄.

MISRA만 넘으면 될 줄 알았더니 IEEE니 IEC니 규격이 되게 많나봄.

첩첩산중이라고..



내일은 type에 관련된 내용들.

