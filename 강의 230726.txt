질문이 들어왔는데

goto문은 MISRA에서 쓰지 말라고 제한하거나 하는 게 없음.

오히려 return을 여러 개 쓰는 걸 권장하지 않고 있어서

에러 처리할 때는 goto로 하는 듯하다.



어제거 복습

헤더파일 중복 정의를 막기 위한 매크로 정의시

_로 시작하면 안된다. 예약어랑 겹칠 수 있기 때문이다.

그러면 어디서 어떻게 에러가 날지 알 수 없기 때문에

PROJECT_UTILS_COMPLEX_H 요렇게 쓴다고 한다.

전역에서 변수나 함수를 정의할 때도 _로 시작하는 것을 허용하지 않음.

다만 지역변수로는 가능함. AUTOSAR라고 하는 자동차쪽 S/W 협력 체계에서는

_로 시작하는 지역변수를 많이 쓴다고 함.


가변인자 매크로 (...)는 C99 표준으로 들어가면서 많은 변화를 가져왔다.

(...)은 __VA_ARGS__로 포워딩해줄 수 있다.


const를 이용한 불변성 지향.

strchr의 리턴값은 const char*로 받아서 써야 한다.


const의 위치에 따른 불변성 적용 범위

========================
#include <stdio.h>

int main(void)
{
    int x = 10;
    int y = 20;

    int* px = &x;
    int* py = &y;

    int** ppx = &px;

    **ppx = 100;
    *ppx = &y;
    ppx = &py;

    const int** ppy1 = &px;
    int const** ppy2 = &px;
    **ppy1 = 100; // 오류
    **ppy2 = 100; // 오류

    int* const* ppz = &px;
    *ppz = &y; // 오류

    int** const ppw = &px;
    ppw = &py; // 오류

    return 0;
}
========================

const int* ppy1 = &px;
int const* ppy2 = &px;

이건 동일한 의미이고, convention 차이임.

Visual Studio에 clang-format 이라는 기능이 있어서

파일 저장할 때 코딩 스타일을 자동으로 적용해준다고 함.

스트레스를 많이 줄여준다고 함.

C언어 할 때는 Visual Studio로 맞추면 좋다고 함.

사람마다 convention이 다르니까

Go처럼 convention을 문법으로 만들어놓은 언어도 있다고 함.

Go언어 개발자 중 한명인 켄 톰슨이 B언어를 만들고

데니스 리치가 B언어를 참고하여 C언어를 만듬.

Go언어가 C언어의 후계자처럼 해서 많은 부분 대체할 거라고 생각했으나

Go언어는 성능이 안나옴. 가비지 컬렉션을 쓰고 있어서

임베디드에서 쓰기에는 조금 무겁다.

하지만 언어에 재밌는 철학들이 많이 있다고 함.



컴파일 타임 상수와 런타임 상수

전역에서 const int를 선언하면

C++에서는 컴파일 타임 상수지만

C에서는 런타임 상수이다.

그리고 C++에서는 external linkage를 갖지만

C에서는 internal linkage라서

같은 파일에서만 접근할 수 있기 때문에

외부에서 쓰려면 헤더로 제공해야 한다.



assert



out parameter를 이용해 복사 오버헤드를 줄이는 방법

결과값을 저장할 주소값을 인자로 전달한다.

그리고 반환값은 함수 수행의 성공 여부로 쓴다.

그리고 함수의 인자에 const을 쓰는 것은

너무 빡빡하기 때문에..



변수명은 가급적이면 타이포그래피적으로 구분되어야 하고

함수 인자를 비워둘 수 있지만 컴파일 타임에 인자 체크를 못하기 때문에

가급적이면 하는 것이 좋고, 웬만하면 변수명도 적어주는 것이 좋다.


멀티쓰레드에서 동작성을 보장할 수 없는 strtok


C언어에서 stdarg를 통해 가변인자 함수를 만들 때는

반드시 고정인자 1개 이상이 필요하다.

등등 예제 코드를 통해 보았지만

근본적으로 가변인자가 가지고 있는 문제점들,

예를 들면 암묵적 계약이 잘못 수행되면 미정의 동작이 발생할 수 있고,

타입 안정성도 떨어질 수 있고.

그래서 CERT-C에서는 주의해라, MISRA에서는 새로운 가변인자 함수를 만들어 쓰지 마라.



선언 11번째

typedef를 이용해서 구조체 타입을 편리하게 정의할 수 있다.

===================
typedef struct obj
{
	int i;
	float f;
} OBJ, *POBJ;


struct obj
{
	int i;
	float f;
};
typedef struct obj OBJ;
typedef struct obj *POBJ;
===================

아래 예제를 보자

===================
#include <stdio.h>

typedef struct
{
    int i;
    float f;
} OBJ, *POBJ;

void print_obj(const POBJ obj)
{
    printf("%d, %f\n", obj->i, obj->f);

    obj->i = 42;   // 에러가 발생하지 않음!!
    obj->f = 10.5; // 에러가 발생하지 않음!!
}

int main(void)
{
    OBJ obj = { 10, 3.14 };
    print_obj(&obj);
    return 0;
}
===================

void print_obj(const POBJ obj)

라고 선언하면

const struct obj* 가 정의되길 기대하지만

실제로는 struct obj* const 가 정의된다.

그래서 obj->i, f가 수정이 가능해져버린다.


이를 피하는 방법은 두 가지가 있다.

1. 포인터에 대한 typedef를 사용하지 말자.

애초부터 OBJ만 만들어놓고

POBJ는 OBJ*로 쓴다면

컴파일 타임에 에러를 잡을 수 있다.

======================
typedef struct
{
    int i;
    float f;
} OBJ;

void print_obj(const OBJ* obj)
{
    printf("%d, %f\n", obj->i, obj->f);

    obj->i = 42;   // 에러가 발생하지 않음!!
    obj->f = 10.5; // 에러가 발생하지 않음!!
}
======================

2. 읽기 전용을 위한 타입을 하나 더 정의한다.

===========
typedef struct
{
    int i;
    float f;
} OBJ, *POBJ;

typedef const OBJ* PCOBJ; // 이 부분

void print_obj(PCOBJ obj)
{
    printf("%d, %f\n", obj->i, obj->f);

    obj->i = 42; // 에러
    obj->f = 10.5; // 에러
}
===========

전통적인 Windows API들은 다 이걸로 구현되어있다고 한다.



선언 12번째 

스택을 만들어보자

=============================
#ifndef PROJ_UTILS_STACK_H
#define PROJ_UTILS_STACK_H

struct stack
{
    void **arr;
    int top;
    int size;
};

typedef struct stack STACK;

extern void print_stack(const STACK* s);
extern STACK* create_stack(int size);

#endif


-------------------------------

#include "stack.h"

#include <stdio.h>
#include <stdlib.h>

void print_stack(const STACK* s)
{
    printf("top = %d, size = %d\n", s->top, s->size);
}

STACK* create_stack(int size)
{
    STACK* stack = malloc(sizeof(STACK));
    if (stack == NULL)
    {
        return NULL;
    }
    stack->arr = malloc(sizeof(void*) * size);
    if (stack->arr == NULL)
    {
        free(stack);
        return NULL;
    }
    stack->size = size;
    return stack;
}

-------------------------------

#include "stack.h"

#include <stdio.h>

int main(void)
{
    STACK* stack = create_stack(10);
    print_stack(stack);
    return 0;
}
=============================

동작은 잘 한다.

하지만 문제점이 있다.

1. 구조체의 구현이 헤더를 통해서 드러난다.

2. 구조체의 멤버의 속성은 함수를 통해 수정되거나 접근되어야 한다.

3. 외부에서 구조체의 데이터를 쉽게 수정할 수 있다.

아래 코드를 보자.

==================
#include "stack.h"

#include <stdio.h>

int main(void)
{
    STACK* stack = create_stack(10);

    stack->top = 100; // 수정되어버림
    stack->size = 50; // 수정되어버림

    print_stack(stack);
    return 0;
}
==================

해결 방법은

구조체를 불투명한 타입(Opaque Type)을 통해 제공하면

외부에서의 접근을 제어할 수 있다.

=============================
#ifndef PROJ_UTILS_STACK_H
#define PROJ_UTILS_STACK_H

struct stack;

typedef struct stack STACK;

extern void print_stack(const STACK* s);
extern STACK* create_stack(int size);

#endif


-------------------------------

#include "stack.h"

struct stack
{
    void **arr;
    int top;
    int size;
};

#include <stdio.h>
#include <stdlib.h>

void print_stack(const STACK* s)
{
    printf("top = %d, size = %d\n", s->top, s->size);
}

STACK* create_stack(int size)
{
    STACK* stack = malloc(sizeof(STACK));
    if (stack == NULL)
    {
        return NULL;
    }
    stack->arr = malloc(sizeof(void*) * size);
    if (stack->arr == NULL)
    {
        free(stack);
        return NULL;
    }
    stack->size = size;
    return stack;
}

-------------------------------

#include "stack.h"

#include <stdio.h>

int main(void)
{
    STACK* stack = create_stack(10);
    print_stack(stack);
    return 0;
}
=============================

구조체 정의부를 소스로 옮김으로써 main에서 컴파일 에러가 발생한다.

원소 변경이 불가능해진다.

이를 불투명한 타입(Opaque Type)이라고 한다.

일종의 정보 은닉이다.

MISRA에도 등급이 있는데,

Advisory 등급에서 제안하는 방법이다.

C++에서는 pImpl idiom 개념과 유사하다고 한다.

컴파일 속도를 증가하는 효과도 얻을 수 있다고 한다.



꼭 좋다고 할 수도 없는게

악의적으로

==============
struct stack {
    void* a;
    int t;
    int s;
};

int main(void)
{
    STACK* stack = create_stack(10);
    printf("%d %d", stack->t, stack->s);
    return 0;
}
==============

이렇게 볼 수는 있다고 한다.

다만 어느정도 감추는 효과가 있다는 것.



선언 13번째

========================
#include <stdio.h>
#include <stdlib.h>

#ifndef USER_H
#define USER_H

struct user;

typedef struct user USER;

extern USER* get_current_user(void);
extern void print_user(const USER* user);

#endif

-------------------------

#include "user.h"

#include <stdio.h>

struct user {
    char name[32];
    char password[32];
};

USER current = {
    .name = "admin",
    .password = "admin_password",
};

USER* get_current_user(void)
{
    return &current;
}

void print_user(const USER* user)
{
    printf("User: %s\n", user->name);
}

-------------------------

#include "user.h"

#include <stdio.h>

int main(void)
{
    USER* user = get_current_user();
    print_user(user);

    return 0;
}
========================

위 코드의 문제점은 

extern USER current;

로 current로 땡겨와서 막 접근해서 사용할 수 있다.

그래서 외부에서 접근하면 안되는 전역 변수와 전역 함수는

static으로 선언하여 내부 연결로 해야 한다.

변수 또는 함수의 가시성을 제한하면

실수 또는 악의적인 접근의 위험성을 줄일 수 있다.

이름 충돌 문제도 방지할 수 있다.

=====================
static USER current = {
    .name = "admin",
    .password = "admin_password",
};
=====================

외부에 공개를 할것이냐 말것이냐를 static을 써줌으로써 구현할 수 있다는 것이다.

정보은닉 관점에서

extern = public
static = private

이다.

전역 변수는 함수를 통해 상태를 접근하도록 제어하는 것이 좋다.

좀 더 견고한 코드를 만들 수 있다.

게다가 static으로 쓰면 이름 충돌 문제도 막을 수 있다.



외부에서 호출 가능한 inline 함수를 만들 때도

헤더를 통해서 제공해야 한다.

다만 구조체 멤버에 접근하는 함수는 불투명한 타입을 통해서는 구현이 불가능하다고 한다.



추가로 implicit declaration 함수는 호출되지 않는다.

외부 함수를 헤더나 extern으로 정의하지 않고 끌어다 쓰는 경우

에러를 출력한다. C99부터 불가능하게 되었다.

다만 MSVC에서는 여전히 지원하고 있다고 한다.

그리고 전역함수는 가져올 때

etern void foo(void);
void foo(void);

둘 다 가능하다고 한다.

하지만 전역변수를 가져올 때는

extern int global;
int global;

둘 중 extern int global; 만 허용된다.

두 내용을 -c로 컴파일해서 nm 까보면

int global;는 .o 안에 메모리 할당이 이루어져 있지만

extern int global;는 메모리 할당 없이 링크만 되어있는 것을 볼 수 있다.



불투명한 타입도 정보 은닉을 통해 접근 제어를 할 수 있지만

일반적으로 쓰기에는 불편함이 있다.

그래서 사용할지 말지는 개인의 판단이 필요하다.

아까 말했듯 inline 함수 사용이 불가능하고

포인터 기반으로 사용해야 하기 때문에 스택에 메모리 할당이 불가능하고

그래서 static 메모리나 heap 메모리를 써야 하고

사용에 번거로움도 있고.

그래서 이런 점들을 고려해서 판단해서 쓰면 된다고 함.



선언 14번째

===================
#include <stdio.h>
#include <string.h>

void print_data(int* data, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%2d ", data[i]);
    }
    printf("\n");
}

int main(void)
{
    int data[10] = { 1, 2, 3, 4, 5 };
    print_data(data, 10);

    memcpy(data + 1, data, sizeof(int) * 5);
    print_data(data, 10);

    return 0;
}
===================

memcpy 사용 예제

1 1 2 3 4 5가 나오길 기대하지만 제대로 나오지 않는다고 한다. (난 왜 제대로 나오지?)

memcpy 헤더 정의를 보면 dest와 src에 restrict 하는 제한자가 있는 것을 볼 수 있다.

restrict 제한자란

C언어의 제한자로써 최적화에 관련된 제한자이다.

C99부터 새롭게 도입됨.

포인터가 가리키는 영역에서 "같은 메모리 공간을 참조하지 않는다" 라는 뜻임.

이걸 컴파일러가 최적화하는 데에 활용한다.

dest와 src는 각각 data + 1과  data로 주소가 서로 다르지만

size가 10이기 때문에 dest와 src가 가리키는 영역이 서로 중첩된다.

따라서 memcpy 수행 시에 같은 메모리 공간이 참조되므로

 "미정의 동작"이 발생한다.


최적화 옵션을 주고 돌릴 때와 안주고 돌릴 때의 결과가 또 다른데,

사실 의미는 없고,

restrict가 끼어있으면 사용하면 안되고

대신 memmove 함수를 사용해야 한다.

memmove는 헤더 정의를 보면 restrict 키워드가 없다.

==============
#include <stdio.h>
#include <string.h>

void print_data(int* data, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%2d ", data[i]);
    }
    printf("\n");
}

int main(void)
{
    int data[10] = { 1, 2, 3, 4, 5 };
    print_data(data, 10);

//    memcpy(data + 1, data, sizeof(int) * 5);
    memmove(data + 1, data, sizeof(int) * 5);
    print_data(data, 10);

    return 0;
}
===============

그럼 restrict이 어떻게 동작하는지 살펴보자.

==============
void inc(int* a, int* b, int* x)
{
    *a += *x;
    *b += *x;
}

void inc2(int* restrict a, int* restrict b, int* restrict x)
{
    *a += *x;
    *b += *x;
}

int main(void)
{
    return 0;
}
==============

두 함수의 어셈을 까보면 차이가 없다.

gcc에 -O2 최적화 옵션을 주어 확인해보자

===================
inc1:
        mov     eax, DWORD PTR [rdx]
        add     DWORD PTR [rdi], eax
        mov     eax, DWORD PTR [rdx]
        add     DWORD PTR [rsi], eax
        ret
inc2:
        mov     eax, DWORD PTR [rdx]
        add     DWORD PTR [rdi], eax
        add     DWORD PTR [rsi], eax
        ret
===================

두 어셈이 다르다.

inc1은

eax = *x
*a += eax
eax = *x
*b += eax

즉 메모리로부터 불러와서 a에 더해주고

메모리로부터 불러와서 b에 더해주는 연산을 수행하고 있다.

근데 inc2는

eax = *x
*a += eax
*b += eax

b에 더해줄 때는 다시 안불러오고 바로 더해주고 있다.

즉 *x를 매번 불러올 것이냐 한 번만 불러올 것이냐가

restrict에 의해 결정된다는 것을 알 수 있다.

즉 restrict는 불러온 메모리에 대해서 변경 가능성이 없다(중첩된 영역이 아니다)

라고 가정해서 메모리로부터 참조하는 연산을 최적화한다.

==================
void inc1(int* a, int* b, int* x)
{
    *a += *x;
    *b += *x;
}

void inc2(int* restrict a, int* restrict b, int* restrict x)
{
    *a += *x;
    *b += *x;
}

int main(void)
{
    int a = 10;
    inc1(&a, &a, &a);
    printf("%d\n", a);

    int b = 10;
    inc2(&b, &b, &b);
    printf("%d\n", b);

    return 0;
}
==================

inc1은 40이 나오지만 inc2는 30이 나온다.

MISRA에서는 restrict를 사용하지 말라고 권고한다.

표준 라이브러리를 정의할 때는 써도 되지만

사용자가 새로 정의할 때는 사용하지 말라고 한다.



C언어 제한자

C언어에 제한자가 세 가지 있다.

Const, Volatile, Restrict 이 있는데,

이 세 개를 묶어서 CVR 제한자라고 한다.



volatile 제한자에 대해 알아보자

signal.h에 있는 signal 함수를 보면

signal 함수의 반환 타입은 포인터이다.

사용법은 signal(SIGINT, handler); 인데

시스템으로부터 SIGINT를 받으면 handler 함수를 수행하도록 하는 함수이다.

==================
#include <stdio.h>
#include <signal.h>

int flag = 1;

void handler(int signum)
{
    printf("handler: %d\n", signum);
    flag = 0;
}

void process(void)
{
    while (flag)
    {
        // ...
    }
    printf("process end\n");
}

int main(void)
{
    signal(SIGINT, handler);
    process();

    getchar();

    return 0;
}
==================

위 코드는 키보드를 입력하면

인터럽트가 발생하면서 flag가 0으로 초기화되고

그래서 무한 루프를 빠져나가는 코드이다.

이게 컴파일이나 실행 환경에 따라 의도대로 동작하기도 하고 안하기도 한다고 하심. (일단 난 잘 됨.)



메모리 가시성 문제

CPU에서는 성능 향상을 위해 변수값을 읽을 때 항상 메모리를 참조하진 않고 cache를 사용하는데

다른 컨텍스트에서 변경된 데이터나 인터럽트같은 하드웨어 신고에 의해 변경된 메모리의 변경 사항을

제대로 관찰할 수 없다.

위 코드로 예로 들면. handler에 의해 flag를 0으로 바꿨지만

process는 변경사항을 알지 못하기 때문에 cache로부터 flag를 계속 읽어오는 문제가 발생할 수 있다.

이걸 해결하려면 flag 변수를 참조할 때 다시 메모리로부터 읽어와야 한다.

이 때 volatile 키워드를 사용한다.

volatile은 항상 변수를 메모리로부터 읽어오도록 하는 키워드이다.

volatile을 너무 많이 쓰면 성능이 떨어지겠지?



CVR 제한자 정리

const : 변수의 값을 변경할 수 없다. 컴파일 상수면 메모리로부터 값을 참조하지 않는다.

volatile : 외부에 의해 값이 변경될 수 있다. 메모리로부터 무조건 동기화하는 형태로 코드 생성함.

restrict : 같은 메모리 영역을 참조하는 포인터가 아니다. 최적화된 기계어 코드를 생성한다. 



아래 코드를 보자.

=================
#include <stdio.h>

int main(void)
{
    const int c = 10;
    int* pc = &c;

    *pc = 100;           // 미정의 동작
    printf("%d\n", *pc); // 미정의 동작
    printf("%d\n", c);
    return 0;
}
=================

const 상수를 const가 아닌 포인터를 통해 수정하는 것은 미정의 동작이다.

===============
#include <stdio.h>

volatile int v = 0;

int main(void)
{
    const int c = 10;
    int* pc = &c;

    *pc = 100;
    printf("%d\n", *pc);
    printf("%d\n", c);

    int* pv = &v;
    *pv = 100;           // 미정의 동작
    printf("%d\n", *pv); // 미정의 동작

    return 0;
}
================

volatile 변수를 volatile이 아닌 포인터를 통해 읽거나 쓰는 것은 미정의 동작이다.

============
#include <stdio.h>

volatile int v = 0;

int main(void)
{
    const int c = 10;
    int* pc = &c;

    *pc = 100; // 
    printf("%d\n", *pc);
    printf("%d\n", c);

    int* pv = &v;
    *pv = 100;
    printf("%d\n", *pv);

    int n = 10;
    int* restrict pr = &n;
    int* pn = pr;

    *pn = 100;
    printf("%d\n", *pn);

    return 0;
}
============

반면에 restrict 한정된 포인터를 일반 포인터를 통해 읽거나 쓰는 것은 허용된다.



수업이 반 정도 지났는데,

결국 수업의 핵심은

"C언어 내부의 요소들을 제대로 이해해야 안전하게 쓸 수 있다"는 내용임.

세부적인 내부 요소들 제대로 이해하는 게 어렵더라.

또 너무 부담가질 필요는 없는게, 어느 정도 걸러주는 진단 도구들이 있으니까.



선언 17번째

또 하나 보자.

==================
#include <stdio.h>

void print_array(int* data, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d\n", data[i]);
    }
}

int main(void)
{
    int x[3] = { 1, 2, 3 };
    print_array(x, 3);
    return 0;
}
==================

간단한 코드인데,

만약 print_array 함수가 항상 고정된 길이의 배열만을 처리한다고 정해져있다면

그 정보를 컴파일러에게 미리 알려줄 수 있다.

예를 들면 "이 함수는 항상 배열이 3개 요소 이상으로 전달된다" 이렇게.

==================
#include <stdio.h>

void print_array(int data[static 3], int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d\n", data[i]);
    }
}

int main(void)
{
    int x[3] = { 1, 2, 3 };
    print_array(x, 3);
    return 0;
}
==================

되게 신기한 문법... 알려지지 않은 문법이다.

이렇게 하면 배열 3 크기에 더 최적화하여 코드를 생성한다고 한다.

하지만 문제점이 있다.

1. 일부 프로세서에서만 지원한다.

2. 정해진 개수 미만의 데이터를 통해 호출할 경우 "미정의 동작"이 된다.

환장 파티다.

MISRA에서는 사용을 금지하고 있다.

당연히 금지하겠지.

미지원 프로세서에서는 성능 향상도 없고,

미세한 성능 향상을 위해 미정의 동작의 위험성을 감수할 필요가 없으니까.

msvc는 컴파일도 안되고, 어셈 까봐도 차이는 없는데,

쓰지 않는 문법이라고 알면 된다고 함.

강사님도 MISRA 문서 보다가 이런 것도 있었어? 하고 아신 거라고 함.



표현식

함수 포인터를 사용하는 방식에는 두 가지가 있음.

===================
#include <stdio.h>

int add(int a, int b) { return a + b; }
int sub(int a, int b) { return a - b; }

int main(void)
{
    int (*fp)(int a, int b) = NULL;

    // C++
    fp = &add;
    printf("%d\n", (*fp)(10, 20));

    // C
    fp = sub;
    printf("%d\n", fp(10, 20));

    return 0;
}
===================

아무렇게나 써도 틀린 건 아니지만

보통 C 개발자들은 아래처럼, C++ 개발자들은 위처럼 쓴다고 함.


함수의 이름도 배열과 마찬가지로,

함수의 이름은 함수의 주소(함수 포인터)로 해석된다. = Decay.

그래서 아래 C의 코드의 경우 C++의 경우와 다르게 함수를 포인터 기호 없이 사용하는 게 가능하다.



표현식 2번째

====================
#include <stdio.h>

// 실제 KQUEUE 라이브러리의 구현에 있는 코드임.
#include <unistd.h>
#include <stdlib.h>
#include <sys/time.h>
#include <time.h>

int main(void)
{
    struct timeval tv;
    unsigned long junk;

    gettimeofday(&tv, NULL);

    srand(tv.tv_sec ^ tv.tv_usec ^ junk);
    printf("%d\n", rand());
    printf("%d\n", rand());
    printf("%d\n", rand());

    return 0;
}
===================

여기서 junk의 의도는?

난수값 시드로 사용함.

근데 문제가 있음.

1. 초기화되지 않은 변수를 참조하는 행위는 미정의 동작임.

2. 컴파일러는 초기화되지않은 변수의 접근을 최적화하고, 결정적으로 이를 통해 예측 가능할 수 있다.

컴파일러의 로직을 알면 불확실하다고도 말할 수 없다는 뜻임.

그렇다면 예측 불가능성에 의존하는 보안 알고리즘에서는 보안 취약점으로 작용할 수 있다.


CERT-C에서는 이를 사고 사례로 전파하고 있다.

그래서 어떻게 했냐면

===================
#include <stdio.h>

// 실제 KQUEUE 라이브러리의 구현에 있는 코드임.
#include <unistd.h>
#include <stdlib.h>
#include <sys/time.h>
#include <time.h>

int main(void)
{
    struct timeval tv;
    double cpu_time_used = ((double)clock()) / CLOCKS_PER_SEC;
    printf("%lf\n", cpu_time_used);

    gettimeofday(&tv, NULL);

    srand(tv.tv_sec ^ tv.tv_usec ^ (unsigned long)cpu_time_used);
    printf("%d\n", rand());
    printf("%d\n", rand());
    printf("%d\n", rand());

    return 0;
}
===================

cpu clock을 이용하도록 했다고 함.

kqueue가 중요한 건 아니고,

이런 게 있더라 하는 것.



표현식 3번째

=======================
#include <stdio.h>

int is_odd(int n)
{
    return n % 2 == 1;
}

int main(void)
{
    printf("%d\n", is_odd(1));
    printf("%d\n", is_odd(3));
    printf("%d\n", is_odd(5));
    printf("%d\n", is_odd(7));

    printf("%d\n", is_odd(2));
    printf("%d\n", is_odd(4));
    printf("%d\n", is_odd(6));
    printf("%d\n", is_odd(8));

    return 0;
}
====================

간단한 코드인데, 이 코드에는 문제점이 있다.

음수를 제대로 처리하지 못함.

C언어에서는 나머지 연산의 결과의 부호에 대한 정의가 존재하지 않았다.

그러다가 C99 표준에서 정수에 대한 /, % 연산의 결과는 나누는 수의 부호로 결정되는 것으로 정의되었다.

==================
#include <stdio.h>
#include <stdlib.h>

int is_odd(int n)
{
    return abs(n % 2) == 1;
}

int main(void)
{
    printf("%d\n", is_odd(1));
    printf("%d\n", is_odd(3));
    printf("%d\n", is_odd(5));
    printf("%d\n", is_odd(7));

    printf("%d\n", is_odd(2));
    printf("%d\n", is_odd(4));
    printf("%d\n", is_odd(6));
    printf("%d\n", is_odd(8));

    return 0;
}
==================

그럼 C99 이전에는 어떻게 하는게 좋았을까?

음수를 구하는 방법

1. 나머지 연산
2. 비트 AND 연산

비트연산를 보자.

================
#include <stdio.h>
#include <stdlib.h>

int is_odd(int n)
{
    return n & 0x1 == 1;
}

int main(void)
{
    printf("%d\n", is_odd(-1));
    printf("%d\n", is_odd(-3));
    printf("%d\n", is_odd(5));
    printf("%d\n", is_odd(7));

    printf("%d\n", is_odd(-2));
    printf("%d\n", is_odd(-4));
    printf("%d\n", is_odd(6));
    printf("%d\n", is_odd(8));

    return 0;
}
================

위 코드는 뭐가 문제인가?

코드를 위처럼 짜면 연산자 우선순위 문제가 생긴다.


연산자 우선순위 표를 보면

"비트연산자는 서로서로의 우선순위가 다 다르다!"

"그리고 비교 연산자보다 우선순위가 낮다!!"

n & 0x1 == 1;

라고 쓰면 n & (0x1 == 1); 로 결합되어서

모든 출력값이 1로 나온다.(근데 왜 난 제대로 나오지?)

이처럼 C언어에서는 직관적이지 않은 연산자 우선순위가 존재해서

논리적 오류가 자주 발생한다.

그래서

비트 이항 연산자(&, |, ^), 논리 연산자(&&, ||)를 사용할 때는

괄호를 잘 사용해야 한다!!!!

==============
    return (n & 0x1) == 1;
==============



컴파일러가 너무 좋아서 다 해준다.

그래서 개발할 때는 좋은데

강의할 땐 안좋은 것 같다고 하심.

이런거 빼먹고 살아야 하는데,

너무 다 해줘서.



후계 구도 언어
C -> Go
C++ -> Rust

Go는 C를 대체하기에는 너무 무겁고

Rust는 C/C++ 영역을 대체하기 막 시작한 단계라고 함.

베타 리딩

Rust가 보편화되면

시큐어코딩 강의는 사라지겠구나 (^^)

Rust는 컴파일러가 엄청나게 많은 검사를 한다고 함.

언어 자체가 메모리 안정성을 보장함.

그렇다고 컴파일 속도가 느리지도 않음.

문제는 개발자가 컴파일되는 코드를 짜는 게 상대적으로 어렵다고 함. (입구컷)


CloudFlare에서 자사 미들웨어 중 하나를 Rust로 개발했는데,

잘 안되었다고 함.

알고보니 리눅스 커널의 버그였다고 함.

Android 커널도 Rust로 짜기 시작했는데

발견하지 못했던 메모리 취약점을 제거했다고 함. 최근 일임.



모질라에서 Rust를 만듬.

크롬, 사파리는 C++로 짜져있었음.

Rust가 만들어진 이유는 Firefox를 다시 구성하겠다는 거였는데

사용처가 넓어지고 있고

C/C++ 하던 사람은 또 곧잘 하겠구나 싶기도 했다고.

Rust는 낭만이 없다는 의견도 있었다고.



표현식 4번째

==============
#include <stdio.h>

void increment(int *pn)
{
    *pn++;
}

int main(void)
{
    int n = 10;
    increment(&n);

    printf("%d", n);
}
==============

우선순위 규칙은 식별자의 오른쪽에 위치하는 연산자가

우선순위가 더 높다.

[], (), ++, -- 이런 것들.

==============
#include <stdio.h>

void increment(int *pn)
{
    (*pn)++;
}

int main(void)
{
    int n = 10;
    increment(&n);

    printf("%d", n);
}
==============

논리연산자 AND, OR는 단축 평가를 수행한다.

a && b 일 때 a가 거짓이면 b를 수행하지 않는다.

a || b 일 때 a가 참이면 b를 수행하지 않는다.

===========
#include <stdio.h>

int main(void)
{
    int a, b, c, d;
    a = b = c = d = 0;
    d = a++ && ++b;
    printf("%d %d %d %d\n", a, b, c, d);

    a = b = c = d = 0;
    d = ++a || b++;
    printf("%d %d %d %d\n", a, b, c, d);

    return 0;
}
===========

그리고 &&와 ||의 우선순위가 서로 다르다.

&&이 더 높다.

==============
#include <stdio.h>

int main(void)
{
    int a, b, c, d;
    a = b = c = d = 0;
    d = a++ && ++b;
    printf("%d %d %d %d\n", a, b, c, d);

    a = b = c = d = 0;
    d = ++a || b++;
    printf("%d %d %d %d\n", a, b, c, d);

    a = b = c = d = 0;
    d = ++a || b++ && ++c;
    printf("%d %d %d %d\n", a, b, c, d);

    return 0;
}
==============

답은 뭘까?

사람마다 답이 다르다는 것은 조금 생각해볼 필요가 있다는 것이다.

&&가 ||보다 높다고 했기 때문에 b++부터 수행될까?

아니다. 다시 풀어쓰면

d = ++a || (b++ && ++c);

와 같다는 뜻이다.

이거 수행하면 1 0 0 1 이다.

=============
#include <stdio.h>

int main(void)
{
    int a, b, c, d;
    a = b = c = d = 0;
    d = a++ && ++b;
    printf("%d %d %d %d\n", a, b, c, d);

    a = b = c = d = 0;
    d = ++a || b++;
    printf("%d %d %d %d\n", a, b, c, d);

    a = b = c = d = 0;
    d = ++a || b++ && ++c;
    printf("%d %d %d %d\n", a, b, c, d);

    int e;
    a = b = c = d = e = 0;
    e = a++ || b++ && ++c || d++;
    printf("%d %d %d %d %d\n", a, b, c, d, e);

    return 0;
}
=============

우선순위표를 다시 한 번 보면 결합성이라고 해서 "결합의 방향"있다.

e = a++ || b++ && ++c || d++;

는

e = a++ || (b++ && ++c) || d++;

를 거쳐

e = (a++ || (b++ && ++c)) || d++;

로 결합된다.

a는 1이 된다.

일단은 a++이기 때문에 a는 0이라서 뒤로 넘어갈거고

b도 1이 되지만 지금은 0이기에 c는 쳐다보지도 않고

d로 넘어가서 d는 1로 되지만 0이기 때문에

최종 거짓이라 e는 0이 된다.

즉 1 1 0 1 0 이 정답이다.


위 예제는 억지로 어렵게 만든 거라 신경 안써도 되는데

중요한 건 연산자는 우선순위와 결합 방향이 존재하기 때문에

&&, || 연산자를 함께 사용할 경우에는 반드시 괄호를 사용해서

모호성을 없애야 한다.



코드리뷰? SVN

트위터 신입사원

SNS는 인생의 낭비는 제쳐두고

상사가 니가 바꿀 수 있으면 바꿔봐라

옥신각신 인생의 낭비

강사님도 어렸을 땐 모던하고 힙한 기술 선호

하지만 지금은 변경되면 스트레스받음. 잘 돌아가면 냅두는 파가 됨.

서비스 몇 개 돌리는 작은 회사의 서비스 개발자라고 하심.

밑부분을 누가 1년마다 자꾸 바꾸는데 난장판이라고.



할당 연산자(대입 연산자, 복합 대입 연산자)는 결합 방향이 오른쪽에서 왼쪽인 대표적인 연산자이다.

=========
#include <stdio.h>

int main(void)
{
    int a, b, c;
    a = b = c = 10;
    printf("%d %d %d\n", a, b, c);

    return 0;
}
=========

위 코드는

a = b = (c = 10);

a = (b = 10);

a = (10);

순서로 실행된다.



나열 연산자는 사용하지 않는 것이 좋다.

===================
#include <stdio.h>

void foo(int a, int b)
{
    return;
}

int main(void)
{
    foo(10, (20, 30));
    return 0;
}
===================

코드를 이렇게 짤 일도 없거니와

바람직하지도 않음.



비어있는 구조체는 표준이 아니다.

===================
#include <stdio.h>

struct AAA {
    // ...
};

int main(void)
{
    printf("%zu\n", sizeof(struct AAA));
    return 0;
}
===================

위 구조체의 크기를 찍어보면 0이 출력된다.

하지만 위와 같은 사용은 미정의 동작이다.

구조체에서는 멤버를 1개 이상 제공하여야 한다.

그리고 아래 예제를 보자.

================
#include <stdio.h>

struct AAA {
    int n;
    double d;
    char c;
};

struct BBB {
    int n;
    char c;
    double d;
};

int main(void)
{
    printf("%zu\n", sizeof(struct AAA));
    printf("%zu\n", sizeof(struct BBB));
    return 0;
}
================

두 구조체의 멤버가 동일하지만

크기를 찍어보면 24, 16으로 서로 다르다.

즉 구조체의 크기가 멤버들의 크기 합만으로 정해지진 않는다는 것임.

패딩 때문임.

패딩을 쓰는 이유는 CPU에서 멤버에 효율적으로 접근하기 위해 쓰는 거고. (성능)

할당하는 방식을 보자.

물론 컴파일러 구현에 따라 다를 수 있지만

대부분 요런 형태로 이루어짐.

AAA는 맨앞 8바이트에 int, 그다음 8바이트에 double, 그다음 8바이트에 char이 할당되어 24바이트로 만들어짐.

BBB는 맨앞 4바이트에 int, 그다음 4바이트에 double, 그다음 8바이트에 char이 할당되어 24바이트로 만들어짐.

배치만 달리 했을 뿐인데 구조체의 크기가 달라지고,

메모리가 부족한 환경에서 불리하게 작용한다.

==============
struct AAA {
    int n;
    // char __padding1[4];
    double d;
    char c;
    // char __padding2[7];
};

struct BBB {
    int n;
    char c;
    // char __padding1[3];
    double d;
};
==============

요거랑 같음.

요점은 멤버 변수의 배치 순서에 따라 패딩을 조절할 수 있고, 제한된 메모리 환경에서는 유용할 수 있다.

일반적으로는 별로 고려할 필요는 없다.



아래 예제를 보자.

===============
#include <stdio.h>

struct user {
    char name[10];
    double height;
    int age;
    double weight;
};

void save(struct user* users, int n)
{
    FILE* fp = fopen("users.dat", "w");
    if (fp == NULL) return;
    fwrite(users, sizeof(struct user), n, fp);
    fclose(fp);
}

int main(void)
{
    struct user users[3] = {
        { .name = "Tom", .age = 42, .height = 180.5, .weight = 88.2 },
        { .name = "Bob", .age = 15, .height = 152.2, .weight = 55.8 },
        { .name = "Alice", .age = 22, .height = 162.2, .weight = 66.8 },
    };

    save(users, 3);

    return 0;
}
===============

users.dat 파일 사이즈를 읽어보면

아래 두 구조체에 따라 사이즈가 달라진다.

=======================
struct user {
    char name[10];
    int age;
    double height;
    double weight;
};

struct user {
    char name[10];
    double height;
    int age;
    double weight;
};
=======================

구조체가 파일로 저장되거나 네트워크로 전송되는 용도인 경우,

플랫폼에 따라 패딩이 달라질 수 있기 때문에, 패딩을 제거해야 한다.

컴파일러 확장 명령을 통해 수행해야한다.

msvc에서는 #pragma pack(1)를 이용하여 제거할 수 있다.

만약 해당 구조체만 패딩을 제거하고 싶으면

구조체 위아래로

#pragma pack(push, 1)
#pragma pack(pop)

을 이용하면 된다.

GNU 컴파일러에서는 아래와 같이 __attribute__((packed))를 붙이면 된다.

================
struct user {
    char name[10];
    double height;
    int age;
    double weight;
} __attribute__((packed));

혹은

struct user {
    char name[10];
    double height;
    int age;
    double weight;
} __attribute__((packed, aligned(1)));
================

안붙이면 40바이트인게 붙이면 30바이트로 줄어든다.



